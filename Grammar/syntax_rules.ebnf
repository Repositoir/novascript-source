program           = statement* ;

statement         = expressionStatement
                  | block
                  | ifStatement
                  | loopStatement
                  | functionDeclaration
                  | variableDeclaration
                  | tryCatchStatement
                  | importStatement ;

block             = "{" statement* "}" ;

expressionStatement = expression ";" ;

ifStatement       = "if" "(" expression ")" block ("else" block)? ;

loopStatement     = forLoop | whileLoop | untilLoop ;
forLoop           = "for" "(" (variableDeclaration | expressionStatement)? ";" expression? ";" expression? ")" block ;
whileLoop         = "while" "(" expression ")" block ;
untilLoop         = "until" "(" expression ")" block ;

functionDeclaration = "func" identifier "(" parameterList? ")" block ;

parameterList      = identifier ("=" expression)? ("," identifier ("=" expression)?)* ;

variableDeclaration = ("let" | "const") identifier ("=" expression)? ";" ;

tryCatchStatement  = "try" block ("catch" "(" identifier ")" block) ;

expression         = assignment ;
assignment         = identifier "=" expression ;

equality           = comparison (("==" | "!=") comparison)* ;
comparison         = addition (("<" | ">" | "<=" | ">=") addition)* ;
addition           = multiplication (("+" | "-") multiplication)* ;
multiplication     = primary (("*" | "/") primary)* ;
primary            = number | string | identifier | objectLiteral | arrayStatement | "(" expression ")" ;

objectLiteral      = "{" (propertyAssignment ("," propertyAssignment)*)? "}" ;
propertyAssignment = identifier ":" expression ;

arrayStatement     = "[" (expression ("," expression)*)? "]" ;

identifier         = /[a-zA-Z_][a-zA-Z0-9_]*/ ;
number             = /[0-9]+(\.[0-9]+)?/ ;
string             = /"([^"]*)"|'([^']*)'/ ;


