Program = { Statement } ;

Statement = VarDeclaration
          | FunctionDeclaration
          | AssignmentExpr
          | IfStatement
          | WhileStatement
          | ForStatement
          | UntilStatement
          | ExpressionStatement
          | ReturnStatement
          | ClassDeclaration
          | ImportStatement
          | TryCatchStatement ;

VarDeclaration = "mut" Identifier "=" Expression ";"
               | "const" Identifier "=" Expression ";" ;

FunctionDeclaration = "func" Identifier "(" [ ParameterList ] ")" Block ;

ParameterList = Identifier { "," Identifier } ;

AssignmentExpr = Identifier "=" Expression ";" ;

IfStatement = "if" "(" Expression ")" Block
              [ "else if" "(" Expression ")" Block ]
              [ "else" Block ] ;

WhileStatement = "while" "(" Expression ")" Block ;

ForStatement = "for" "(" VarDeclaration Expression ";" AssignmentExpr ")" Block ;

UntilStatement = "until" "(" Expression ")" Block ;

ExpressionStatement = Expression ";" ;

ReturnStatement = "return" Expression ";" ;

ClassDeclaration = "class" Identifier "{" { ClassMember } "}" ;

ClassMember = VarDeclaration
            | FunctionDeclaration ;

ImportStatement = "import" StringLiteral ";" ;

TryCatchStatement = "try" Block "catch" "(" Identifier ")" Block ;

Block = "{" { Statement } "}" ;

Expression = BinaryExpr
           | UnaryExpr
           | Literal
           | Identifier
           | CallExpr
           | MemberExpr
           | ArrayIndexExpr
           | NewExpr
           | ObjectLiteral
           | ArrayLiteral ;

BinaryExpr = Expression BinaryOperator Expression ;

BinaryOperator = "+" | "-" | "*" | "/" | ">" | "<" | "==" | "!=" ;

UnaryExpr = UnaryOperator Expression ;

UnaryOperator = "-" | "!" ;

Literal = NumericLiteral
        | StringLiteral ;

NumericLiteral = Digit { Digit } [ "." Digit { Digit } ] ;

StringLiteral = "\"" { Character } "\"" ;

Identifier = Letter { Letter | Digit | "_" } ;

CallExpr = Identifier "(" [ ArgumentList ] ")" ;

ArgumentList = Expression { "," Expression } ;

MemberExpr = Expression "." Identifier ;

ArrayIndexExpr = Expression "[" Expression "]" ;

NewExpr = "new" Identifier "(" [ ArgumentList ] ")" ;

ObjectLiteral = "{" [ PropertyList ] "}" ;

PropertyList = Property { "," Property } ;

Property = Identifier ":" Expression ;

ArrayLiteral = "[" [ ExpressionList ] "]" ;

ExpressionList = Expression { "," Expression } ;

Digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

Letter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
       | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
       | "u" | "v" | "w" | "x" | "y" | "z"
       | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
       | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
       | "U" | "V" | "W" | "X" | "Y" | "Z" ;

Character = Letter | Digit | Symbol ;

Symbol = " " | "!" | "\"" | "#" | "$" | "%" | "&" | "'" | "(" | ")"
       | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "="
       | ">" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{"
       | "|" | "}" | "~" ;