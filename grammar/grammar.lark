program: statement*

statement: var_declaration
         | function_declaration
         | assignment_expr
         | if_statement
         | while_statement
         | for_statement
         | until_statement
         | expression_statement
         | return_statement
         | class_declaration
         | import_statement
         | try_catch_statement

var_declaration: "mut" CNAME "=" expression ";"
               | "const" CNAME "=" expression ";"

function_declaration: "func" CNAME "(" [parameter_list] ")" block

parameter_list: CNAME ("," CNAME)*

assignment_expr: CNAME "=" expression ";"

if_statement: "if" "(" expression ")" block
              ("else if" "(" expression ")" block)*
              ("else" block)?

while_statement: "while" "(" expression ")" block

for_statement: "for" "(" var_declaration expression ";" assignment_expr ")" block

until_statement: "until" "(" expression ")" block

expression_statement: expression ";"

return_statement: "return" expression ";"

class_declaration: "class" CNAME "{" class_member* "}"

class_member: var_declaration
            | function_declaration

import_statement: "import" STRING ";"

try_catch_statement: "try" block "catch" "(" CNAME ")" block

block: "{" statement* "}"

expression: binary_expr
          | unary_expr
          | literal
          | CNAME
          | call_expr
          | member_expr
          | array_index_expr
          | new_expr
          | object_literal
          | array_literal

binary_expr: expression binary_operator expression

binary_operator: "+" | "-" | "*" | "/" | ">" | "<" | "==" | "!="

unary_expr: unary_operator expression

unary_operator: "-" | "!"

literal: NUMBER
       | STRING

call_expr: CNAME "(" [argument_list] ")"

argument_list: expression ("," expression)*

member_expr: expression "." CNAME

array_index_expr: expression "[" expression "]"

new_expr: "new" CNAME "(" [argument_list] ")"

object_literal: "{" [property_list] "}"

property_list: property ("," property)*

property: CNAME ":" expression

array_literal: "[" [expression_list] "]"

expression_list: expression ("," expression)*

// Terminals
STRING: /"[^"]*"/
NUMBER: /-?\d+(\.\d+)?/
CNAME: /[a-zA-Z_][a-zA-Z0-9_]*/
%import common.WS
%ignore WS